// used a backtracking approach , generated all subsets , found the one with the maximum length... Also learnt that when we are using memo table , consider all variabkes in the 
function which are changing

class Solution {
public:
    
    int t[601][101][101] ;
    
    int fun(int i , vector<pair<int , int>>& v , int m, int n){
       
        if(t[i][m][n]) return t[i][m][n] ;
        
        if((m ==0 && n == 0) || i == v.size() ) return 0 ;
        
        if(v[i].first > m or v[i].second > n) return t[i][m][n] = fun(i+1 , v ,m , n) ;
        
        int include = 1 + fun(i+1 , v , m - v[i].first , n - v[i].second) ;
        int exclude = fun(i+1 , v , m , n ) ;
        
        return t[i][m][n] =  max(include , exclude) ;
        
    }
    
    int findMaxForm(vector<string>& strs, int m, int n) {
        vector<pair<int , int>> v ;
        for(auto i : strs){
            int ones = 0 , zeroes = 0;
            for(auto j : i ){
                if( j == '1') ones++ ;
                else zeroes++;
            }
           v.push_back({zeroes , ones}) ;
        }
        
        return fun(0 , v , m , n) ;
    }
};
