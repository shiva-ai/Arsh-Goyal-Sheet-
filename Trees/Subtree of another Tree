/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    bool fun2(TreeNode* root , TreeNode* subRoot){
        if(root == NULL && subRoot == NULL) return true ;
        
        if(root && subRoot){
            if(root->val != subRoot->val) return false ;
            return fun2(root->left , subRoot->left) && fun2(root->right , subRoot->right) ;
        }
        
        return false ;
    }
    
    bool fun(TreeNode* root , TreeNode* subRoot){
        if(root == NULL) return false ;
        
        bool val = false ;
        
        if(root->val == subRoot->val) val = fun2(root , subRoot) ;
        
        if(val) return true ;
        
        return ( fun(root->left , subRoot) || fun(root->right , subRoot) );
    }
    
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        return fun(root , subRoot) ;
    }
};
