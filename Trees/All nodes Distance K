/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    
    void fun(TreeNode* root , map<TreeNode* , TreeNode*>& mp){
        queue<TreeNode*> q ;
        q.push(root) ;
        
        mp[root] = NULL ;
        
        while(!q.empty()){
            TreeNode* curr = q.front() ;
            q.pop() ;
            
            if(curr->left){
                q.push(curr->left) ;
                mp[curr->left] = curr ;
            }
            
            if(curr->right){
                q.push(curr->right) ;
                mp[curr->right] = curr ;
            }
        }
        
        return ;
    }
    
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        map<TreeNode* , TreeNode* > mp ;
        fun(root , mp) ; // All parents of nodes are connected
        
        map<TreeNode* , bool> vis ;
        vis[target] = true ;
        
        queue<TreeNode*> q;
        q.push(target) ;
        
        int l = 0 ;
        
        while(!q.empty()){
            int s = q.size() ;
            
            if(l++ == k) break ;
            
            for(int i = 0 ; i < s ; i++){
                TreeNode* curr = q.front() ;
                q.pop() ;
                
                if(curr->left && !vis[curr->left]){
                    q.push(curr->left) ;
                    vis[curr->left] = true ;
                }
                
                if(curr->right && !vis[curr->right]){
                    q.push(curr->right) ;
                    vis[curr->right] = true ;
                }
                
                if(mp[curr] && !vis[mp[curr]]){
                    q.push(mp[curr]) ;
                    vis[mp[curr]] = true ;
                }
            }
        }
        
        vector<int> res ;
        while(!q.empty()){
            TreeNode* curr = q.front() ;
            res.push_back(curr->val) ;
            q.pop() ;
        }
        
        return res;
    }
};
